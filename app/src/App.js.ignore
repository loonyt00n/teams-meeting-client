import React, { useEffect, useState } from 'react';
import { BrowserRouter as Router, useLocation } from 'react-router-dom';
import { AzureCommunicationTokenCredential } from '@azure/communication-common';
import { CallWithChatComposite, fromFlatCommunicationIdentifier } from '@azure/communication-react';
import { createStatefulCallClient, createAzureCommunicationCallWithChatAdapter } from '@azure/communication-react';
import { FluentThemeProvider } from '@azure/communication-react';
import { useACSClient } from './useACSClient';

const useQuery = () => {
  return new URLSearchParams(useLocation().search);
};

const App = () => {
  const { token, error } = useACSClient();
  const query = useQuery();
  const meetingId = query.get('meetingId');
  const displayName = query.get('displayName') || 'Anonymous';

  const [validationError, setValidationError] = useState(null);

  useEffect(() => {
    if (meetingId && !/^[0-9]{12}$/.test(meetingId)) {
      setValidationError('Invalid meeting ID format. Should be a 12 digit number with no spaces.');
      return;
    }

    if (displayName.length > 256) {
      setValidationError('Display name is too long.');
      return;
    }

    if (token && meetingId && !validationError) {
      const initialize = async () => {
        try {
          const callClient = createStatefulCallClient({
            userId: fromFlatCommunicationIdentifier(token.user.communicationUserId)
          });
          const adapter = await createAzureCommunicationCallWithChatAdapter({
            endpoint: token.endpoint,
            userId: token.user,
            displayName: displayName,
            credential: new AzureCommunicationTokenCredential(token.token), // Correctly set getToken function
            locator: { groupId: meetingId }
          });

          const callWithChatComposite = new CallWithChatComposite({ adapter, fluentTheme: FluentThemeProvider });
          document.getElementById('composite-root').appendChild(callWithChatComposite);
        } catch (e) {
          setValidationError('Error initializing call with chat composite.' + e.message);
        }
      };

      initialize();
    }
  }, [token, meetingId, displayName, validationError]);

  return (
    <Router>
      <div className="App">
        {error && <p>Error: {error.message}</p>}
        {validationError && <p>Error: {validationError}</p>}
        {token && !validationError ? (
          <div id="composite-root" />
        ) : (
          <p>Loading...</p>
        )}
        {!meetingId && <p>Please provide a valid meeting ID in the query parameter.</p>}
      </div>
    </Router>
  );
};

export default App;
